{"version":3,"file":"tiny-vue.esm.js","sources":["../src/compiler-core/src/ast.ts","../src/compiler-core/src/parser.ts","../src/compiler-core/src/transform.ts"],"sourcesContent":["export const enum NodeTypes {\n    TEXT,\n    ROOT,\n    INTERPOLATION,\n    SIMPLE_EXPRESSION,\n    ELEMENT,\n}\n\nexport const enum ElementTypes {\n    ELEMENT,\n}","import { NodeTypes, ElementTypes } from \"./ast\";\n\nconst enum TagType {\n    Start,\n    End,\n}\n\nexport function baseParse(content: string) {\n    const context = createParserContext(content);\n    return createRoot(parseChildren(context));\n}\n\nfunction createParserContext(content) {\n    console.log(\"创建 paserContext\");\n    return {\n        source: content,\n    };\n}\n\nfunction parseChildren(context) {\n    console.log(\"开始解析 children\");\n    const nodes: any[] = [];\n\n    while (!isEnd(context)) {\n        let node;\n        if (context.source.startsWith(\"{{\")) {\n            // {{ 开头\n            node = parseMustache(context);\n        } else if (context.source.startsWith(\"<\")) {\n            // 标签开头\n            if (/[a-z]/i.test(context.source[1])) {\n                // 字母开头\n                node = parseElement(context, TagType.Start);\n            } else if (context.source[1] === \"/\") {\n                // 结束标签\n                if (/[a-z]/i.test(context.source[2])) {\n                    parseTag(context, TagType.End);\n\n                    continue;\n                }\n            }\n        }\n\n        if (!node) {\n            node = parseText(context);\n        }\n        nodes.push(node);\n    }\n\n    return nodes;\n}\n\n// 解析文本\nfunction parseText(context): any {\n    console.log(\"解析 text\", context);\n    let endIndex = context.source.length;\n\n    const endTokens = [\"<\", \"{{\"];\n    for (let i = 0; i < endTokens.length; i++) {\n        const index = context.source.indexOf(endTokens[i])\n        if (index !== -1) {\n            endIndex = index\n        }\n    }    \n\n    const content = parseTextData(context, endIndex);\n\n    return {\n        type: NodeTypes.TEXT,\n        content,\n    };\n}\n\nfunction parseTextData(context: any, length: number): any {\n    console.log(\"解析 textData\");\n    //\n    const rawText = context.source.slice(0, length);\n    // 移动光标\n    advanceBy(context, length);\n\n    return rawText;\n}\n\n// 解析花括号语法\nfunction parseMustache(context) {\n    console.log(\"解析 mustache\", context);\n    let content = context.source;\n\n    // 查找结束标识\n    const startIndex = context.source.indexOf(\"{{\");\n    const endIndex = context.source.indexOf(\"}}\");\n\n    // 没有 {{ 或者 }}\n    if (startIndex == -1 || endIndex == -1) {\n        console.warn(`${context.source} is not a valid interpolation`);\n    } else {\n        // 移除 {{\n        advanceBy(context, 2);\n        content = parseSimpleExpress(\n            startIndex,\n            endIndex - 2,\n            context\n        );\n        // 移除 }}\n        advanceBy(context, 2);\n    }\n    return {\n        type: NodeTypes.INTERPOLATION,\n        content,\n    };\n}\n\nfunction parseSimpleExpress(startIndex, endIndex, context) {\n    console.log(\"解析 simple express\");\n\n    const rawText = context.source.slice(startIndex, endIndex);\n\n    // 移除 值\n    advanceBy(context, endIndex);\n\n    return {\n        type: NodeTypes.SIMPLE_EXPRESSION,\n        content: rawText.trim(),\n    };\n}\n\nfunction parseElement(context, tagType) {\n    const element = parseTag(context, tagType);\n\n    const children = parseChildren(context);\n\n    // 解析尾部标签</div>\n    if (element && startsWithEndTagOpen(context, element.tag)) {\n        parseTag(context, TagType.End);\n    } else {\n    }\n\n    if (element) {\n        element[\"children\"] = children;\n    }\n    return element;\n}\n\nfunction parseTag(context, tagType) {\n    // 以 < 开头，后面可能存在 /, 再后面是标签，标签后 制表符等 /> 存在0至多个\n    const match = /^<\\/?([a-z][^\\r\\n\\t\\f />]*)/i.exec(context.source);\n\n    let tag = \"\";\n    if (match) {\n        tag = match[1];\n        // 移除开始标签\n        // <div></div>\n        advanceBy(context, match[0].length); // ></div>\n\n        // 暂不考虑 自闭合\n        advanceBy(context, 1); //</div>\n    }\n\n    if (tagType === TagType.End) return;\n\n    return {\n        type: NodeTypes.ELEMENT,\n        tag: tag,\n        tagType: ElementTypes.ELEMENT,\n    };\n}\n\nfunction startsWithEndTagOpen(context, tag) {\n    // 以 </ 开头，并且 取开始标签值对应的长度，转成小写后，对比是否相同\n    return (\n        context.source.startsWith(\"</\") &&\n        context.source.slice(2, tag.length).toLowerCase() === tag.toLowerCase()\n    );\n}\n\nfunction advanceBy(context, numberOfCharacters) {\n    console.log(\"移动光标\", context, numberOfCharacters);\n    context.source = context.source.slice(numberOfCharacters);\n}\n\nfunction isEnd(context) {\n    return !context.source;\n}\n\nfunction createRoot(children) {\n    return {\n        type: NodeTypes.ROOT,\n        children,\n    };\n}\n","import { NodeTypes } from \"./ast\";\n\nexport function transform(root, options = {}) {\n    // 创建 context\n    const context = createTransformContext(root, options);\n\n    // 遍历 node\n    traverseNode(root, context);\n}\n\nfunction traverseNode(node, context) {\n    // 节点转换 方法\n    const nodeTransforms = context.nodeTransforms;\n    nodeTransforms.forEach((fn) => {\n        fn(node, context);\n    });\n\n    switch (node.type) {\n        case NodeTypes.ROOT:\n        case NodeTypes.ELEMENT:\n            traverseChildren(node, context);\n            break;\n\n        default:\n            break;\n    }\n}\n\nfunction traverseChildren(node, context) {\n    node.children &&\n        node.children.forEach((childNode) => {\n            // TODO: 需要设置 context 的值\n            traverseNode(childNode, context);\n        });\n}\n\nfunction createTransformContext(root, options) {\n    const context = {\n        root,\n        nodeTransforms: options.nodeTransforms || [],\n    };\n    return context;\n}\n"],"names":[],"mappings":"IAAkB,UAMjB;AAND,CAAA,UAAkB,SAAS,EAAA;AACvB,IAAA,SAAA,CAAA,SAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAI,CAAA;AACJ,IAAA,SAAA,CAAA,SAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAI,CAAA;AACJ,IAAA,SAAA,CAAA,SAAA,CAAA,eAAA,CAAA,GAAA,CAAA,CAAA,GAAA,eAAa,CAAA;AACb,IAAA,SAAA,CAAA,SAAA,CAAA,mBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,mBAAiB,CAAA;AACjB,IAAA,SAAA,CAAA,SAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAO,CAAA;AACX,CAAC,EANiB,SAAS,KAAT,SAAS,GAM1B,EAAA,CAAA,CAAA,CAAA;IAEiB,aAEjB;AAFD,CAAA,UAAkB,YAAY,EAAA;AAC1B,IAAA,YAAA,CAAA,YAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAO,CAAA;AACX,CAAC,EAFiB,YAAY,KAAZ,YAAY,GAE7B,EAAA,CAAA,CAAA;;ACRD,IAAW,OAGV,CAAA;AAHD,CAAA,UAAW,OAAO,EAAA;AACd,IAAA,OAAA,CAAA,OAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAK,CAAA;AACL,IAAA,OAAA,CAAA,OAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA,GAAA,KAAG,CAAA;AACP,CAAC,EAHU,OAAO,KAAP,OAAO,GAGjB,EAAA,CAAA,CAAA,CAAA;AAEK,SAAU,SAAS,CAAC,OAAe,EAAA;AACrC,IAAA,MAAM,OAAO,GAAG,mBAAmB,CAAC,OAAO,CAAC,CAAC;AAC7C,IAAA,OAAO,UAAU,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC;AAC9C,CAAC;AAED,SAAS,mBAAmB,CAAC,OAAO,EAAA;AAChC,IAAA,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;IAC/B,OAAO;AACH,QAAA,MAAM,EAAE,OAAO;KAClB,CAAC;AACN,CAAC;AAED,SAAS,aAAa,CAAC,OAAO,EAAA;AAC1B,IAAA,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;IAC7B,MAAM,KAAK,GAAU,EAAE,CAAC;AAExB,IAAA,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE;AACpB,QAAA,IAAI,IAAI,CAAC;QACT,IAAI,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;AAEjC,YAAA,IAAI,GAAG,aAAa,CAAC,OAAO,CAAC,CAAC;AACjC,SAAA;aAAM,IAAI,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;YAEvC,IAAI,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;AAElC,gBAAA,IAAI,GAAG,YAAY,CAAC,OAAO,IAAgB,CAAC;AAC/C,aAAA;iBAAM,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;gBAElC,IAAI,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;oBAClC,QAAQ,CAAC,OAAO,EAAA,CAAA,CAAc,CAAC;oBAE/B,SAAS;AACZ,iBAAA;AACJ,aAAA;AACJ,SAAA;QAED,IAAI,CAAC,IAAI,EAAE;AACP,YAAA,IAAI,GAAG,SAAS,CAAC,OAAO,CAAC,CAAC;AAC7B,SAAA;AACD,QAAA,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACpB,KAAA;AAED,IAAA,OAAO,KAAK,CAAC;AACjB,CAAC;AAGD,SAAS,SAAS,CAAC,OAAO,EAAA;AACtB,IAAA,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;AAChC,IAAA,IAAI,QAAQ,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC;AAErC,IAAA,MAAM,SAAS,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;AAC9B,IAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACvC,QAAA,MAAM,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAA;AAClD,QAAA,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;YACd,QAAQ,GAAG,KAAK,CAAA;AACnB,SAAA;AACJ,KAAA;IAED,MAAM,OAAO,GAAG,aAAa,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IAEjD,OAAO;AACH,QAAA,IAAI,EAAgB,CAAA;QACpB,OAAO;KACV,CAAC;AACN,CAAC;AAED,SAAS,aAAa,CAAC,OAAY,EAAE,MAAc,EAAA;AAC/C,IAAA,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;AAE3B,IAAA,MAAM,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;AAEhD,IAAA,SAAS,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;AAE3B,IAAA,OAAO,OAAO,CAAC;AACnB,CAAC;AAGD,SAAS,aAAa,CAAC,OAAO,EAAA;AAC1B,IAAA,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;AACpC,IAAA,IAAI,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC;IAG7B,MAAM,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAChD,MAAM,QAAQ,GAAG,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAG9C,IAAI,UAAU,IAAI,CAAC,CAAC,IAAI,QAAQ,IAAI,CAAC,CAAC,EAAE;QACpC,OAAO,CAAC,IAAI,CAAC,CAAA,EAAG,OAAO,CAAC,MAAM,CAA+B,6BAAA,CAAA,CAAC,CAAC;AAClE,KAAA;AAAM,SAAA;AAEH,QAAA,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;QACtB,OAAO,GAAG,kBAAkB,CACxB,UAAU,EACV,QAAQ,GAAG,CAAC,EACZ,OAAO,CACV,CAAC;AAEF,QAAA,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;AACzB,KAAA;IACD,OAAO;AACH,QAAA,IAAI,EAAyB,CAAA;QAC7B,OAAO;KACV,CAAC;AACN,CAAC;AAED,SAAS,kBAAkB,CAAC,UAAU,EAAE,QAAQ,EAAE,OAAO,EAAA;AACrD,IAAA,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;AAEjC,IAAA,MAAM,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;AAG3D,IAAA,SAAS,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IAE7B,OAAO;AACH,QAAA,IAAI,EAA6B,CAAA;AACjC,QAAA,OAAO,EAAE,OAAO,CAAC,IAAI,EAAE;KAC1B,CAAC;AACN,CAAC;AAED,SAAS,YAAY,CAAC,OAAO,EAAE,OAAO,EAAA;IAClC,MAAM,OAAO,GAAG,QAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;AAE3C,IAAA,MAAM,QAAQ,GAAG,aAAa,CAAC,OAAO,CAAC,CAAC;IAGxC,IAAI,OAAO,IAAI,oBAAoB,CAAC,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,EAAE;QACvD,QAAQ,CAAC,OAAO,EAAA,CAAA,CAAc,CAAC;AAClC,KACA;AAED,IAAA,IAAI,OAAO,EAAE;AACT,QAAA,OAAO,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC;AAClC,KAAA;AACD,IAAA,OAAO,OAAO,CAAC;AACnB,CAAC;AAED,SAAS,QAAQ,CAAC,OAAO,EAAE,OAAO,EAAA;IAE9B,MAAM,KAAK,GAAG,8BAA8B,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAElE,IAAI,GAAG,GAAG,EAAE,CAAC;AACb,IAAA,IAAI,KAAK,EAAE;AACP,QAAA,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QAGf,SAAS,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;AAGpC,QAAA,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;AACzB,KAAA;AAED,IAAA,IAAI,OAAO,KAAgB,CAAA;QAAE,OAAO;IAEpC,OAAO;AACH,QAAA,IAAI,EAAmB,CAAA;AACvB,QAAA,GAAG,EAAE,GAAG;AACR,QAAA,OAAO,EAAsB,CAAA;KAChC,CAAC;AACN,CAAC;AAED,SAAS,oBAAoB,CAAC,OAAO,EAAE,GAAG,EAAA;IAEtC,QACI,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC;QAC/B,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,KAAK,GAAG,CAAC,WAAW,EAAE,EACzE;AACN,CAAC;AAED,SAAS,SAAS,CAAC,OAAO,EAAE,kBAAkB,EAAA;IAC1C,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,kBAAkB,CAAC,CAAC;IACjD,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;AAC9D,CAAC;AAED,SAAS,KAAK,CAAC,OAAO,EAAA;AAClB,IAAA,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC;AAC3B,CAAC;AAED,SAAS,UAAU,CAAC,QAAQ,EAAA;IACxB,OAAO;AACH,QAAA,IAAI,EAAgB,CAAA;QACpB,QAAQ;KACX,CAAC;AACN;;SC3LgB,SAAS,CAAC,IAAI,EAAE,OAAO,GAAG,EAAE,EAAA;IAExC,MAAM,OAAO,GAAG,sBAAsB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AAGtD,IAAA,YAAY,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AAChC,CAAC;AAED,SAAS,YAAY,CAAC,IAAI,EAAE,OAAO,EAAA;AAE/B,IAAA,MAAM,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC;AAC9C,IAAA,cAAc,CAAC,OAAO,CAAC,CAAC,EAAE,KAAI;AAC1B,QAAA,EAAE,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AACtB,KAAC,CAAC,CAAC;IAEH,QAAQ,IAAI,CAAC,IAAI;QACb,KAAoB,CAAA,CAAA;AACpB,QAAA,KAAA,CAAA;AACI,YAAA,gBAAgB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YAChC,MAAM;AAIb,KAAA;AACL,CAAC;AAED,SAAS,gBAAgB,CAAC,IAAI,EAAE,OAAO,EAAA;AACnC,IAAA,IAAI,CAAC,QAAQ;QACT,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,SAAS,KAAI;AAEhC,YAAA,YAAY,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;AACrC,SAAC,CAAC,CAAC;AACX,CAAC;AAED,SAAS,sBAAsB,CAAC,IAAI,EAAE,OAAO,EAAA;AACzC,IAAA,MAAM,OAAO,GAAG;QACZ,IAAI;AACJ,QAAA,cAAc,EAAE,OAAO,CAAC,cAAc,IAAI,EAAE;KAC/C,CAAC;AACF,IAAA,OAAO,OAAO,CAAC;AACnB;;;;"}